{"version":3,"sources":["expo_commands/eject/Eject.js"],"names":["projectRoot","filesUsingExpoSdk","filesWithExpo","usingExpo","length","expoSdkWarning","bold","filename","cyan","yellow","italic","reactNativeOptionMessage","questions","type","name","message","default","choices","value","prompt","ejectMethod","exists","resolve","useYarn","npmOrYarn","configFilenameAsync","configName","readConfigJsonAsync","exp","pkgJson","pkg","Error","validate","s","stripDashes","undefined","indexOf","appJson","writeFile","green","ejectCommand","ejectArgs","sync","stdio","status","red","process","exit","newDevDependencies","projectBabelPath","readFile","projectBabelRc","toString","babelRcJson","JSON","parse","presets","includes","map","preset","push","main","dependencies","expo","devDependencies","scripts","start","ios","android","jest","eject","gteSdkVersion","lolThatsSomeComplexCode","args","stdin","stderr","detachAsync","ejectAsync","findJavaScriptProjectFilesInRoot","projectJsFiles","all","f","buf","i","contents","jsFileContents","filesUsingExpo","requires","findAll","sort","root","stat","stats","isFile","endsWith","isDirectory","readdir","children","join","jsFilesInChildren","concat","apply","ret","c"],"mappings":"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","file":"../../../expo_commands/eject/Eject.js","sourcesContent":["// @flow\n\nimport chalk from 'chalk';\nimport fse from 'fs-extra';\nimport inquirer from 'inquirer';\nimport matchRequire from 'match-require';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport spawn from 'cross-spawn';\nimport { ProjectUtils, Detach, Versions } from 'xdl';\nimport log from '../../log';\n\nimport { loginOrRegisterIfLoggedOut } from '../../accounts';\n\nexport async function ejectAsync(projectRoot: string) {\n  const filesWithExpo = await filesUsingExpoSdk(projectRoot);\n  const usingExpo = filesWithExpo.length > 0;\n\n  let expoSdkWarning;\n  if (usingExpo) {\n    expoSdkWarning = `${chalk.bold(\n      'Warning!'\n    )} We found at least one file where your project imports the Expo SDK:\n`;\n\n    for (let filename of filesWithExpo) {\n      expoSdkWarning += `  ${chalk.cyan(filename)}\\n`;\n    }\n\n    expoSdkWarning += `\n${chalk.yellow.bold(\n      'If you choose the \"plain\" React Native option below, these imports will stop working.'\n    )}`;\n  } else {\n    expoSdkWarning = `\\\nWe didn't find any uses of the Expo SDK in your project, so you should be fine to eject to\n\"Plain\" React Native. (This check isn't very sophisticated, though.)`;\n  }\n\n  log(\n    `\n${expoSdkWarning}\nWe ${chalk.italic('strongly')} recommend that you read this document before you proceed:\n  ${chalk.cyan(\n    'https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md'\n  )}\nEjecting is permanent! Please be careful with your selection.\n`\n  );\n\n  let reactNativeOptionMessage = \"React Native: I'd like a regular React Native project.\";\n\n  if (usingExpo) {\n    reactNativeOptionMessage =\n      chalk.italic(\n        \"(WARNING: See above message for why this option may break your project's build)\\n  \"\n      ) + reactNativeOptionMessage;\n  }\n\n  const questions = [\n    {\n      type: 'list',\n      name: 'ejectMethod',\n      message: 'How would you like to eject from create-react-native-app?',\n      default: usingExpo ? 'expoKit' : 'raw',\n      choices: [\n        {\n          name: reactNativeOptionMessage,\n          value: 'raw',\n        },\n        {\n          name:\n            \"ExpoKit: I'll create or log in with an Expo account to use React Native and the Expo SDK.\",\n          value: 'expoKit',\n        },\n        {\n          name: \"Cancel: I'll continue with my current project structure.\",\n          value: 'cancel',\n        },\n      ],\n    },\n  ];\n\n  const { ejectMethod } = await inquirer.prompt(questions);\n\n  if (ejectMethod === 'raw') {\n    const useYarn = await fse.exists(path.resolve('yarn.lock'));\n    const npmOrYarn = useYarn ? 'yarn' : 'npm';\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    const { exp, pkg: pkgJson } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    if (!exp) throw new Error(`Couldn't read ${configName}`);\n    if (!pkgJson) throw new Error(`Couldn't read package.json`);\n\n    log(\"We have a couple of questions to ask you about how you'd like to name your app:\");\n    const appJson = await inquirer.prompt([\n      {\n        name: 'displayName',\n        message: \"What should your app appear as on a user's home screen?\",\n        default: exp.name,\n        validate: s => {\n          return s.length > 0;\n        },\n      },\n      {\n        name: 'name',\n        message: 'What should your Android Studio and Xcode projects be called?',\n        default: pkgJson.name ? stripDashes(pkgJson.name) : undefined,\n        validate: s => {\n          return s.length > 0 && s.indexOf('-') === -1 && s.indexOf(' ') === -1;\n        },\n      },\n    ]);\n\n    log('Writing your selections to app.json...');\n    // write the updated app.json file\n    await fse.writeFile(path.resolve('app.json'), JSON.stringify(appJson, null, 2));\n    log(chalk.green('Wrote to app.json, please update it manually in the future.'));\n\n    const ejectCommand = 'node';\n    const ejectArgs = [\n      path.resolve('node_modules', 'react-native', 'local-cli', 'cli.js'),\n      'eject',\n    ];\n\n    const { status } = spawn.sync(ejectCommand, ejectArgs, {\n      stdio: 'inherit',\n    });\n\n    if (status !== 0) {\n      log(chalk.red(`Eject failed with exit code ${status}, see above output for any issues.`));\n      log(chalk.yellow('You may want to delete the `ios` and/or `android` directories.'));\n      process.exit(1);\n    } else {\n      log('Successfully copied template native code.');\n    }\n\n    const newDevDependencies = [];\n    // Try to replace the Babel preset.\n    try {\n      const projectBabelPath = path.resolve('.babelrc');\n      // If .babelrc doesn't exist, the app is using the default config and\n      // editing the config is not necessary.\n      if (await fse.exists(projectBabelPath)) {\n        const projectBabelRc = (await fse.readFile(projectBabelPath)).toString();\n\n        // We assume the .babelrc is valid JSON. If we can't parse it (e.g. if\n        // it's JSON5) the error is caught and a message asking to change it\n        // manually gets printed.\n        const babelRcJson = JSON.parse(projectBabelRc);\n        if (babelRcJson.presets && babelRcJson.presets.includes('babel-preset-expo')) {\n          babelRcJson.presets = babelRcJson.presets.map(\n            preset =>\n              preset === 'babel-preset-expo'\n                ? 'babel-preset-react-native-stage-0/decorator-support'\n                : preset\n          );\n          await fse.writeFile(projectBabelPath, JSON.stringify(babelRcJson, null, 2));\n          newDevDependencies.push('babel-preset-react-native-stage-0');\n          log(\n            chalk.green(\n              `Babel preset changed to \\`babel-preset-react-native-stage-0/decorator-support\\`.`\n            )\n          );\n        }\n      }\n    } catch (e) {\n      log(\n        chalk.yellow(\n          `We had an issue preparing your .babelrc for ejection.\nIf you have a .babelrc in your project, make sure to change the preset\nfrom \\`babel-preset-expo\\` to \\`babel-preset-react-native-stage-0/decorator-support\\`.`\n        )\n      );\n      log(chalk.red(e));\n    }\n\n    delete pkgJson.main;\n\n    // NOTE: expo won't work after performing a raw eject, so we should delete this\n    // it will be a better error message for the module to not be found than for whatever problems\n    // missing native modules will cause\n    delete pkgJson.dependencies.expo;\n    if (pkgJson.devDependencies) {\n      delete pkgJson.devDependencies['react-native-scripts'];\n      delete pkgJson.devDependencies['jest-expo'];\n    }\n    if (!pkgJson.scripts) {\n      pkgJson.scripts = {};\n    }\n    pkgJson.scripts.start = 'react-native start';\n    pkgJson.scripts.ios = 'react-native run-ios';\n    pkgJson.scripts.android = 'react-native run-android';\n\n    if (pkgJson.jest && pkgJson.jest.preset === 'jest-expo') {\n      pkgJson.jest.preset = 'react-native';\n      newDevDependencies.push('jest-react-native');\n    } else if (pkgJson.jest) {\n      log(\n        `${chalk.bold(\n          'Warning'\n        )}: it looks like you've changed the Jest preset from jest-expo to ${pkgJson.jest\n          .preset}. We recommend you make sure this Jest preset is compatible with ejected apps.`\n      );\n    }\n\n    // no longer relevant to an ejected project (maybe build is?)\n    delete pkgJson.scripts.eject;\n\n    log(`Updating your ${npmOrYarn} scripts in package.json...`);\n\n    await fse.writeFile(path.resolve('package.json'), JSON.stringify(pkgJson, null, 2));\n\n    log(chalk.green('Your package.json is up to date!'));\n\n    // Starting from react-native 0.49.x (SDK 22), react-native eject template includes this out of the box.\n    if (!Versions.gteSdkVersion(exp, '22.0.0')) {\n      log(`Adding entry point...`);\n      const lolThatsSomeComplexCode = `import { AppRegistry } from 'react-native';\nimport App from './App';\nAppRegistry.registerComponent('${appJson.name}', () => App);\n`;\n      await fse.writeFile(path.resolve('index.js'), lolThatsSomeComplexCode);\n      log(chalk.green('Added new entry points!'));\n    }\n\n    log(`\nNote that using \\`${npmOrYarn} start\\` will now require you to run Xcode and/or\nAndroid Studio to build the native code for your project.`);\n\n    log('Removing node_modules...');\n    rimraf.sync(path.resolve('node_modules'));\n    if (useYarn) {\n      log('Installing packages with yarn...');\n      const args = newDevDependencies.length > 0 ? ['add', '--dev', ...newDevDependencies] : [];\n      spawn.sync('yarnpkg', args, { stdio: 'inherit' });\n    } else {\n      // npm prints the whole package tree to stdout unless we ignore it.\n      const stdio = [process.stdin, 'ignore', process.stderr];\n\n      log('Installing existing packages with npm...');\n      spawn.sync('npm', ['install'], { stdio });\n\n      if (newDevDependencies.length > 0) {\n        log('Installing new packages with npm...');\n        spawn.sync('npm', ['install', '--save-dev', ...newDevDependencies], {\n          stdio,\n        });\n      }\n    }\n  } else if (ejectMethod === 'expoKit') {\n    await loginOrRegisterIfLoggedOut();\n    await Detach.detachAsync(projectRoot);\n  } else {\n    // we don't want to print the survey for cancellations\n    log('OK! If you change your mind you can run this command again.');\n    return;\n  }\n\n  log(\n    `${chalk.green('Ejected successfully!')}\nPlease consider letting us know why you ejected in this survey:\n  ${chalk.cyan('https://goo.gl/forms/iD6pl218r7fn9N0d2')}`\n  );\n}\n\nasync function filesUsingExpoSdk(projectRoot: string): Promise<Array<string>> {\n  const projectJsFiles = await findJavaScriptProjectFilesInRoot(projectRoot);\n\n  const jsFileContents = (await Promise.all(\n    projectJsFiles.map(f => fse.readFile(f))\n  )).map((buf, i) => {\n    return {\n      filename: projectJsFiles[i],\n      contents: buf.toString(),\n    };\n  });\n\n  const filesUsingExpo = [];\n\n  for (let { filename, contents } of jsFileContents) {\n    const requires = matchRequire.findAll(contents);\n\n    if (requires.includes('expo')) {\n      filesUsingExpo.push(filename);\n    }\n  }\n\n  filesUsingExpo.sort();\n\n  return filesUsingExpo;\n}\n\nfunction stripDashes(s: string): string {\n  let ret = '';\n\n  for (let c of s) {\n    if (c !== ' ' && c !== '-') {\n      ret += c;\n    }\n  }\n\n  return ret;\n}\n\nasync function findJavaScriptProjectFilesInRoot(root: string): Promise<Array<string>> {\n  // ignore node_modules\n  if (root.includes('node_modules')) {\n    return [];\n  }\n\n  const stats = await fse.stat(root);\n\n  if (stats.isFile()) {\n    if (root.endsWith('.js')) {\n      return [root];\n    } else {\n      return [];\n    }\n  } else if (stats.isDirectory()) {\n    const children = await fse.readdir(root);\n\n    // we want to do this concurrently in large project folders\n    const jsFilesInChildren = await Promise.all(\n      children.map(f => findJavaScriptProjectFilesInRoot(path.join(root, f)))\n    );\n\n    return [].concat.apply([], jsFilesInChildren);\n  } else {\n    // lol it's not a file or directory, we can't return a honey badger, 'cause it don't give a\n    return [];\n  }\n}\n"],"sourceRoot":"/Users/ville/Projects/expo/universe/dev/exp/src"}