{"version":3,"sources":["serve/PackagerController.js"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC/B,IAAI,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC7C,IAAI,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAE9C,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;IAE5B,kBAAkB;AAEX,WAFP,kBAAkB,CAEV,IAAI,EAAE;;;0BAFd,kBAAkB;;AAIpB,QAAI,YAAY,GAAG;AACjB,UAAI,EAAE,SAAS;KAChB,CAAC;AACF,QAAI,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AACzC,QAAI,CAAC,UAAU,GAAG,IAAI,CAAC;;AAEvB,QAAI,CAAC,aAAa,GAAG,aAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACpD,YAAK,qBAAqB,GAAG,OAAO,CAAC;AACrC,YAAK,oBAAoB,GAAG,MAAM,CAAC;KACpC,CAAC,CAAC;GACJ;;eAdG,kBAAkB;;WAgBjB,iBAAG;AACN,YAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;KAC9D;;;6BAEe,aAAG;;;AAEjB,UAAI,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC;AAC/B,UAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;;;;AAInB,YAAI,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,aAAa,CAAC,KAAK,CAAC,CAAC;OAC7C;AACD,UAAI,CAAC,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,GAAG,IAAI,EAAE,eAAe,GAAG,IAAI,CAAE,EAAE;AACjI,aAAK,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC;AAC9C,gBAAQ,EAAE,KAAK;OAChB,CAAC,CAAC;;AAEH,UAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,YAAM;AACzC,YAAI,KAAK,CAAC;AACV,YAAI,MAAM,GAAG,EAAE,CAAC;AAChB,eAAO,IAAI,MAAM,KAAK,GAAG,OAAK,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAA,AAAC,EAAE;AACtD,gBAAM,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC3B,iBAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC5B,cAAI,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,EAAE;AAC1C,mBAAK,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3C,mBAAK,qBAAqB,CAAC,OAAK,SAAS,CAAC,CAAC;AAC3C,kBAAM;WACP;SACF;OACF,CAAC,CAAC;;AAEH,aAAO,IAAI,CAAC,aAAa,CAAC;KAE3B;;;WAEG,gBAAG;AACL,YAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;KAC5D;;;WAEQ,qBAAG;;;AAEV,aAAO,aAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,YAAI,OAAK,SAAS,EAAE;;;;;AAKlB,iBAAK,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACrC,iBAAK,SAAS,CAAC,IAAI,EAAE,CAAC;SACvB,MAAM;AACL,gBAAM,CAAC,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;SACnD;OACF,CAAC,CAAC;KACJ;;;SAtEG,kBAAkB;;;AA0ExB,MAAM,CAAC,OAAO,GAAG,kBAAkB,CAAC","file":"serve/PackagerController.js","sourcesContent":["var _ = require('lodash-node');\nvar child_process = require('child_process');\nvar freeportAsync = require('freeport-async');\n\nvar config = require('../config');\n\nclass PackagerController {\n\n  constructor(opts) {\n\n    var DEFAULT_OPTS = {\n      port: undefined,\n    };\n    this.opts = _.assign(DEFAULT_OPTS, opts);\n    this._givenOpts = opts;\n\n    this.packagerReady = new Promise((fulfill, reject) => {\n      this._packagerReadyFulfill = fulfill;\n      this._packagerReadyReject = reject;\n    });\n  }\n\n  start() {\n    throw new Error(\"Use `.startAsync()` instead of `.start()`\");\n  }\n\n  async startAsync() {\n\n    var root = config.absolutePath;\n    if (!this.opts.port) {\n      // Consider warning or erroring here; we might want to force this interface\n      // to always have the port explicitly specified to avoid confusion with the\n      // code in serveAsync.js that also determines a free port\n      this.opts.port = await freeportAsync(19000);\n    }\n    this._packager = child_process.spawn(config.packagerPath, [\"--port=\" + this.opts.port, \"--root=\" + root, \"--assetRoots=\" + root,], {\n      stdio: [process.stdin, 'pipe', process.stderr],\n      detached: false,\n    });\n\n    this._packager.stdout.on('readable', () => {\n      var chunk;\n      var buffer = '';\n      while (null !== (chunk = this._packager.stdout.read())) {\n        buffer += chunk.toString();\n        process.stdout.write(chunk);\n        if (buffer.match(/React packager ready\\./)) {\n          this._packager.stdout.pipe(process.stdout);\n          this._packagerReadyFulfill(this._packager);\n          break;\n        }\n      }\n    });\n\n    return this.packagerReady;\n\n  }\n\n  stop() {\n    throw new Error(\"Use `.stopAsync()` instead of `.stop()`\");\n  }\n\n  stopAsync() {\n\n    return new Promise((fulfill, reject) => {\n      if (this._packager) {\n        // TODO: Figure out how to close whatever needs to be closed\n        // to make the process exit if this child process is the only\n        // thing holding it up\n        //console.log(\"Stopping packager\");\n        this._packager.once('exit', fulfill);\n        this._packager.kill();\n      } else {\n        reject(new Error(\"Packager hasn't been started\"));\n      }\n    });\n  }\n\n}\n\nmodule.exports = PackagerController;\n"],"sourceRoot":"/source/"}