{"version":3,"sources":["commands/serve.js"],"names":[],"mappings":"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","file":"commands/serve.js","sourcesContent":["var child_process = require('child_process');\nvar co = require('co');\nvar crayon = require('@ccheever/crayon');\nvar instapromise = require('instapromise');\nvar ngrok = require('ngrok');\nvar path = require('path');\nvar simpleSpinner = require('simple-spinner');\nvar stream = require('stream');\n\nvar config = require('../config');\nvar log = require('../log');\nvar urlUtil = require('../urlUtil');\nvar userSettings = require('../userSettings');\nvar waitAsync = require('../waitAsync');\n\n\nmodule.exports = {\n  name: 'serve',\n  description: \"Starts a local server to serve your app and gives you a URL to it\",\n  options: [\n    ['--path', \"The path to the place where your package is\", '.'],\n    ['--port', \"The port to run the server on\", \"Random (9000-9999)\"],\n    ['--ngrokSubdomain', \"The ngrok subdomain to use\", (config.ngrok && config.ngrok.subdomain)],\n    ['--ngrokAuthToken', \"The ngrok authToken to use\", (config.ngrok && config.ngrok.authToken)],\n    ['--send', \"An e-mail address or phone number to send a link to\"]\n  ],\n  help: \"Starts a local server to serve your app and gives you a URL to it\",\n  runAsync: co.wrap(function *(env) {\n      var argv = env.argv;\n      var args = argv._;\n\n      var ngrokSubdomain = argv['ngrok-subdomain'] || (config.ngrok && config.ngrok.subdomain) || undefined;\n      var ngrokAuthToken = argv['ngrok-auth-token'] || (config.ngrok && config.ngrok.authToken) || undefined;\n\n      var port = argv.port;\n      if (port == null) {\n        port = 9000 + Math.floor(Math.random() * 1000);\n      }\n\n      var urlP = ngrok.promise.connect({\n        port: port,\n        authtoken: ngrokAuthToken,\n        subdomain: ngrokSubdomain,\n      });\n\n      //var root = path.resolve(__dirname, '..', '..');\n      var root = config.absolutePath;\n      var packager = child_process.spawn(config.packagerPath, [\"--port=\" + port, \"--root=\" + root, \"--assetRoots=\" + root,], {\n        stdio: [process.stdin, 'pipe', process.stderr],\n      });\n\n      var outStream = new stream.Writable();\n      outStream.buffer = '';\n      outStream._write = function (chunk, encoding, done) {\n        outStream.buffer += chunk.toString();\n        done();\n      };\n\n      var packagerReady = new Promise((fulfill, reject) => {\n\n        var packagerBuffer = '';\n        packager.stdout.on('readable', function () {\n          var chunk;\n          while (null !== (chunk = packager.stdout.read())) {\n            packagerBuffer += chunk.toString();\n            if (packagerBuffer.match(/React packager ready\\./)) {\n              packager.stdout.pipe(outStream);\n              fulfill(packagerBuffer);\n              break;\n            }\n          }\n        });\n      });\n\n      var urlWrittenP = urlP.then((ngrokUrl) => {\n        return urlUtil.writeUrlFileAsync(ngrokUrl);\n      });\n\n      log(crayon.gray(\"The packager is starting up and building your initial bundle...\"));\n      simpleSpinner.start();\n\n      var [ngrokUrl, packagerBuffer] = yield [urlWrittenP, packagerReady];\n\n      //log(crayon.green(\"Started packager and ngrok\"));\n\n      var httpUrl = yield urlUtil.getTestedMainBundleUrlAsync();\n      var expUrl = urlUtil.expUrlFromHttpUrl(httpUrl);\n\n      simpleSpinner.stop();\n      console.log(crayon.green(expUrl) + \"\\n\");\n\n      packager.stdout.pipe(process.stdout);\n      console.log(crayon.gray(outStream.buffer));\n\n      // TODO: Add sending stuff\n\n  }),\n};\n"],"sourceRoot":"/source/"}