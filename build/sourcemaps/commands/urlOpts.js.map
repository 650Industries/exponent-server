{"version":3,"sources":["commands/urlOpts.js"],"names":[],"mappings":";;AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;AAE/B,IAAI,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAE7C,IAAI,OAAO,GAAG,SAAV,OAAO,CAAa,GAAG,EAAE;AACzB,SAAO,CACL,CAAC,OAAO,EAAE,iBAAiB,IAAI,AAAC,GAAG,KAAK,KAAK,GAAI,YAAY,GAAG,EAAE,CAAA,AAAC,CAAC,EACpE,CAAC,aAAa,EAAE,uBAAuB,IAAI,AAAC,GAAG,KAAK,WAAW,GAAI,YAAY,GAAG,EAAE,CAAA,AAAC,CAAC,EACtF,CAAC,SAAS,EAAE,mBAAmB,IAAI,AAAC,GAAG,KAAK,OAAO,GAAI,YAAY,GAAG,EAAE,CAAA,AAAC,CAAC,EAC1E,CAAC,YAAY,EAAE,kEAAkE,CAAC,EAClF,CAAC,OAAO,EAAE,yCAAyC,CAAC,EACpD,CAAC,UAAU,EAAE,qCAAqC,CAAC,EACnD,CAAC,kBAAkB,EAAE,qCAAqC,CAAC,EAC3D,CAAC,UAAU,EAAE,+BAA8B,CAAC,EAC5C,CAAC,QAAQ,EAAE,kDAAkD,CAAC,EAC9D,CAAC,OAAO,EAAE,+EAA+E,CAAC,CAC3F,CAAC;CACL,CAAA;;AAED,SAAS,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE;;AAE7B,MAAI,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAExB,MAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;;AAEpB,MAAI,AAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,GAAI,CAAC,EAAE;AACtD,UAAM,YAAY,CAAC,UAAU,EAAE,GAAG,EAAE,wDAAwD,CAAC,CAAC;GAC/F;;AAED,MAAI,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAA,AAAC,EAAE;AAClD,UAAM,YAAY,CAAC,UAAU,EAAE,GAAG,EAAE,qDAAqD,CAAC,CAAC;GAC5F;;AAED,MAAI,IAAI,CAAC,GAAG,EAAE;AAAE,QAAI,CAAC,IAAI,GAAG,KAAK,CAAC;GAAE;AACpC,MAAI,IAAI,CAAC,SAAS,EAAE;AAAE,QAAI,CAAC,IAAI,GAAG,WAAW,CAAC;GAAE;AAChD,MAAI,IAAI,CAAC,KAAK,EAAE;AAAE,QAAI,CAAC,IAAI,GAAG,OAAO,CAAC;GAAE;;AAExC,MAAI,IAAI,CAAC,GAAG,EAAE;AACZ,QAAI,CAAC,GAAG,GAAG,IAAI,CAAC;GACjB;;AAED,MAAI,IAAI,CAAC,GAAG,EAAE;AACZ,QAAI,CAAC,GAAG,GAAG,IAAI,CAAC;GACjB;;AAED,MAAI,IAAI,CAAC,KAAK,EAAE;AACd,QAAI,CAAC,GAAG,GAAG,KAAK,CAAC;GAClB;;AAED,MAAI,IAAI,CAAC,MAAM,EAAE;AACf,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC;GACpB;;AAED,MAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,QAAI,CAAC,MAAM,GAAG,KAAK,CAAC;GACrB;;AAED,MAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;;AAG1C,SAAO,IAAI,CAAC;CAEb;;AAED,MAAM,CAAC,OAAO,GAAG;AACf,SAAO,EAAP,OAAO;AACP,aAAW,EAAX,WAAW,EACZ,CAAC","file":"commands/urlOpts.js","sourcesContent":["var _ = require('lodash-node');\n\nvar CommandError = require('./CommandError');\n\nvar options = function (def) {\n    return [\n      ['--lan', \"Use the LAN URL\" + ((def === 'lan') ? \" (default)\" : '')],\n      ['--localhost', \"Use the localhost URL\" + ((def === 'localhost') ? \" (default)\" : '')],\n      ['--ngrok', \"Use the ngrok URL\" + ((def === 'ngrok') ? \" (default)\" : '')],\n      ['--redirect', \"Generates an HTTP URL that will redirect you to your desired URL\"],\n      ['--dev', \"Have the packager generate a dev bundle\"],\n      ['--minify', \"Have the packager minify the bundle\"],\n      ['--mainModulePath', \"Specify the path to the main module\"],\n      ['--notest', \"Don't bother testing the URL\"],\n      ['--http', \"Generate an http:// URL instead of an exp:// URL\"],\n      ['--web', \"Generate a URL you can use to view your article in the Appetize web simulator\"],\n    ];\n}\n\nfunction optsFromEnv(env, def) {\n\n  var opts = _.clone(def);\n\n  var argv = env.argv;\n\n  if ((!!argv.lan + !!argv.localhost + !!argv.ngrok) > 1) {\n    throw CommandError('BAD_ARGS', env, \"Specify at most one of --lan, --localhost, and --ngrok\");\n  }\n\n  if (!!argv.web && (!!argv.lan || !!argv.localhost)) {\n    throw CommandError('BAD_ARGS', env, \"You can only generate web simulator URLs with ngrok\");\n  }\n\n  if (argv.lan) { opts.type = 'lan'; }\n  if (argv.localhost) { opts.type = 'localhost'; }\n  if (argv.ngrok) { opts.type = 'ngrok'; }\n\n  if (argv.web) {\n    opts.web = true;\n  }\n\n  if (argv.dev) {\n    opts.dev = true;\n  }\n\n  if (argv.nodev) {\n    opts.dev = false;\n  }\n\n  if (argv.minify) {\n    opts.minify = true;\n  }\n\n  if (argv.nominify) {\n    opts.minify = false;\n  }\n\n  opts.mainModulePath = argv.mainModulePath;\n\n\n  return opts;\n\n}\n\nmodule.exports = {\n  options,\n  optsFromEnv,\n};\n"],"sourceRoot":"/source/"}