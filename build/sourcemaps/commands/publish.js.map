{"version":3,"sources":["commands/publish.js"],"names":[],"mappings":"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","file":"commands/publish.js","sourcesContent":["var simpleSpinner = require('@exponent/simple-spinner');\n\nvar api = require('../api');\nvar CommandError = require('./CommandError');\nvar config = require('../config');\nvar log = require('../log');\nvar urlUtil = require('../urlUtil');\nvar userSettings = require('../userSettings');\n\nasync function uploadInfoAsync(env) {\n  var us = await userSettings.readAsync();\n  var {username, hashedPassword} = us;\n  if ((!username) || (!hashedPassword)) {\n    throw CommandError('NOT_LOGGED_IN', env, \"You aren't logged in to Exponent. Try running `exp adduser` or `exp login` before you publish.\");\n  }\n\n  var pkg = await config.packageJsonFile.readAsync();\n  var packageName = pkg.name;\n  if (!packageName) {\n    throw CommandError('MISSING_PACKAGE_NAME', env, \"Your package.json must contain a package name to publish\");\n  }\n\n  // Rules for remote package name:\n  // 1. If the name is of the format `@username/package-name` then the remote package name is `@username/package-name`\n  // 2. If the name is just `package-name` then we conctruct `@username/package-name` from your logged in username\n  //    and the package name in package.json.\n\n\n  var remoteFullPackageName;\n  var remotePackageName;\n  var remoteUsername;\n  var match = packageName.match(/^\\@([a-zA-Z0-9_-]+)\\/([a-zA-Z0-0_-]+)/);\n\n  if (match) {\n    remoteUsername = match[1];\n    remotePackageName = match[2];\n  } else {\n    remoteUsername = username;\n    remotePackageName = packageName;\n  }\n\n  remoteFullPackageName = '@' + remoteUsername + '/' + remotePackageName;\n\n  var packageVersion = pkg.version;\n  var localPackageName = packageName;\n\n  var ngrokUrl = await urlUtil.mainBundleUrlAsync({\n    type: 'ngrok',\n    minify: true,\n    dev: false,\n  });\n\n  return {\n    username,\n    hashedPassword,\n    localPackageName,\n    packageVersion,\n    remoteUsername,\n    remotePackageName,\n    remoteFullPackageName,\n    ngrokUrl,\n  };\n\n}\n\nmodule.exports = {\n  name: 'publish',\n  description: \"Publishes this article to exp.host\",\n  uploadInfoAsync,\n  runAsync: async function (env) {\n\n    var uploadInfo = await uploadInfoAsync(env);\n    log(\"Publishing package version\", uploadInfo.packageVersion, \"as\", uploadInfo.remoteFullPackageName, \"...\");\n    try {\n      simpleSpinner.start();\n      var result = await api.callMethodAsync('publish', [uploadInfo]);\n    } catch (e) {\n      throw CommandError('PUBLISH_FAILED', env, e.message);\n    } finally {\n      simpleSpinner.stop();\n    }\n\n    log(\"Published.\");\n\n    console.log(\"exp://exp.host/\" + result.packageFullName);\n\n  },\n};\n"],"sourceRoot":"/source/"}