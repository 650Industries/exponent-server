{"version":3,"sources":["commands/pm2serve.js"],"names":[],"mappings":"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","file":"commands/pm2serve.js","sourcesContent":["var child_process = require('child_process');\nvar crayon = require('@ccheever/crayon');\nvar freeportAsync = require('freeport-async');\nvar inquirerAsync = require('inquirer-async');\nvar instapromise = require('instapromise');\nvar jsonFile = require('@exponent/json-file');\nvar md5hex = require('@exponent/md5hex');\nvar path = require('path');\nvar pm2 = require('pm2');\nvar simpleSpinner = require('@exponent/simple-spinner');\n\nvar askUser = require('../askUser');\nvar CommandError = require('./CommandError');\nvar config = require('../config');\nvar log = require('../log');\nvar sendTo = require('../commands/sendTo');\nvar serveAsync = require('../serve/serveAsync');\nvar urlUtil = require('../urlUtil');\nvar userSettings = require('../userSettings');\nvar waitForRunningAsync = require('../serve/waitForRunningAsync');\n\nfunction packageJsonFullPath() {\n  return path.resolve('package.json');\n}\n\nasync function pm2NameAsync() {\n  var packageName = await jsonFile.getAsync('package.json', 'name');\n  var pkgJsonHash = md5hex(packageJsonFullPath(), 8);\n  return 'exp-serve/' + packageName + ':' + pkgJsonHash;\n}\n\nasync function getPm2AppByIdAsync(id) {\n  // N.B. You need to be connected to PM2 for this to work\n  var apps = await pm2.promise.list();\n  for (var app of apps) {\n    if (app.pm_id === id) {\n      return app;\n    }\n  }\n}\n\nasync function setupServeAsync(env) {\n  var argv = env.argv;\n  var args = argv._;\n\n  // If a project-dir is provided, change to that directory\n  var projectDir = args[1];\n  if (projectDir) {\n    process.chdir(projectDir);\n  }\n}\n\nasync function getPm2AppByNameAsync(name) {\n  var a = null;\n  var apps = await pm2.promise.list();\n  for (var app of apps) {\n    if (app.name === name) {\n      a = app;\n    }\n  }\n  return a;\n}\n\nmodule.exports = {\n  start: {\n    name: 'start',\n    description: \"Starts or restarts a local server to serve your app and gives you a URL to it\",\n    args: [\"[project-dir]\"],\n    options: [\n      ['--path', \"The path to the place where your package is\", '.'],\n      ['--port', \"The port to run the server on\", \"Random free port\"],\n      //['--ngrokSubdomain', \"The ngrok subdomain to use\", (config.ngrok && config.ngrok.subdomain)],\n      //['--ngrokAuthToken', \"The ngrok authToken to use\", (config.ngrok && config.ngrok.authToken)],\n      ['--sendTo', \"A phone number or e-mail address to send a link to\"],\n      ['--nosend', \"Don't ask about sending a link to the server\"],\n    ],\n    help: \"Starts a local server to serve your app and gives you a URL to it.\\n\" +\n      \"[project-dir] defaults to '.'\\n\" +\n      \"\\n\" +\n      \"If you don't specify a port, a random, free port will be chosen automatically.\",\n    runAsync: async function (env) {\n      var argv = env.argv;\n      var args = argv._;\n\n      await setupServeAsync(env);\n\n      if (!argv.nodaemon) {\n        //log(\"Using pm2\");\n\n        var [pm2Name, pm2Id] = await Promise.all([\n          pm2NameAsync(),\n          config.expInfoFile.getAsync('pm2Id', null),\n        ]);\n\n        var bin = process.argv[0];\n        var script = process.argv[1];\n        var args_ = process.argv.slice(2);\n        args_.push('--nodaemon');\n\n        await pm2.promise.connect();\n\n        await config.expInfoFile.writeAsync({pm2Id, pm2Name, state: 'STARTING'});\n\n        // There is a race condition here, but let's just not worry about it for now...\n        var needToStart = true;\n        if (pm2Id) {\n\n          // If this is already being managed by pm2, then restart it\n          //var app = await getPm2AppByIdAsync(pm2Id);\n          var app = await getPm2AppByNameAsync(pm2Name);\n          if (app) {\n            log(\"pm2 managed process exists; restarting it\");\n            await pm2.promise.restart(app.pm_id);\n            //var app_ = await getPm2AppByIdAsync(pm2Id);\n            needToStart = false;\n          } else {\n            log(\"Can't find pm2 managed process\", pm2Id, \" so will start a new one\");\n            await config.expInfoFile.deleteKeyAsync('pm2Id');\n          }\n\n        }\n\n        if (needToStart) {\n          log(\"Starting exp-serve process under pm2\");\n\n          // If it's not being managed by pm2 then start it\n          var _apps = await pm2.promise.start({\n            name: pm2Name,\n            script: script,\n            args: args_,\n            watch: false,\n            cwd: process.cwd(),\n            env: process.env,\n          });\n        }\n\n\n        var app = await getPm2AppByNameAsync(pm2Name);\n\n        if (app) {\n          await config.expInfoFile.mergeAsync({pm2Name, pm2Id: app.pm_id});\n        } else {\n          throw CommandError('PM2_ERROR_STARTING_PROCESS', env, \"Something went wrong starting exp serve:\");\n        }\n\n        await pm2.promise.disconnect();\n\n        var recipient = argv.sendTo || null;\n        if (!recipient && !argv.nosend) {\n          recipient = await askUser.askForMobileNumberAsync();\n        }\n\n        log(\"Waiting for packager, etc. to start\");\n        simpleSpinner.start();\n        await waitForRunningAsync(config.expInfoFile);\n        simpleSpinner.stop();\n        log(\"Exponent is ready.\");\n\n        var httpUrl = await urlUtil.mainBundleUrlAsync({type: 'ngrok'});\n        var url = urlUtil.expUrlFromHttpUrl(httpUrl);\n        log(\"Your URL is\\n\\n\" + crayon.underline(url) + \"\\n\");\n\n        if (recipient) {\n          await sendTo.sendUrlAsync(url, recipient);\n        }\n\n        return config.expInfoFile.readAsync();\n\n\n\n      }\n\n      log(crayon.gray(\"Using project at\", process.cwd()));\n      var mainModulePath = await urlUtil.guessMainModulePathAsync();\n      var entryPoint = await urlUtil.entryPointAsync();\n      log(crayon.gray(\"Using mainModulePath of\", mainModulePath, \"and an entry point of\", entryPoint));\n\n      var ngrokSubdomain = argv['ngrok-subdomain'] || (config.ngrok && config.ngrok.subdomain) || undefined;\n      var ngrokAuthToken = argv['ngrok-auth-token'] || (config.ngrok && config.ngrok.authToken) || undefined;\n\n      var port = argv.port || await freeportAsync(9000);\n      await serveAsync({port});\n\n      return config.expInfoFile.readAsync();\n\n\n    },\n  },\n  stop: {\n    name: 'stop',\n    description: \"Stops the server\",\n    runAsync: async function (env) {\n      await pm2.promise.connect();\n      try {\n        log(\"Stopping the server...\");\n        await pm2.promise.stop(await pm2NameAsync());\n      } catch (e) {\n        log.error(\"Failed to stop the server\\n\" + e.message);\n      }\n      await pm2.promise.disconnect();\n      await config.expInfoFile.updateAsync({state: 'STOPPED'});\n      log(\"Stopped.\");\n    },\n  },\n  pm2NameAsync,\n  setupServeAsync,\n};\n"],"sourceRoot":"/source/"}