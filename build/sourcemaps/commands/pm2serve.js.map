{"version":3,"sources":["commands/pm2serve.js"],"names":[],"mappings":"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","file":"commands/pm2serve.js","sourcesContent":["var crayon = require('@ccheever/crayon');\nvar inquirerAsync = require('inquirer-async');\nvar instapromise = require('instapromise');\nvar jsonFile = require('@exponent/json-file');\nvar md5hex = require('@exponent/md5hex');\nvar path = require('path');\n\nvar config = require('../config');\nvar log = require('../log');\nvar urlUtil = require('../urlUtil');\n\nfunction packageJsonFullPath() {\n  return path.resolve('package.json');\n}\n\nasync function pm2NameAsync() {\n  var packageName = await jsonFile.getAsync('package.json', 'name');\n  var pkgJsonHash = md5hex(packageJsonFullPath(), 6);\n  return 'exp-serve/' + pkgJsonHash + '.' + packageName;\n}\n\nmodule.exports = {\n  name: 'serve',\n  description: \"Starts a local server to serve your app and gives you a URL to it\",\n  args: [\"[project-dir]\"],\n  options: [\n    ['--path', \"The path to the place where your package is\", '.'],\n    ['--port', \"The port to run the server on\", \"Random free port\"],\n    ['--ngrokSubdomain', \"The ngrok subdomain to use\", (config.ngrok && config.ngrok.subdomain)],\n    ['--ngrokAuthToken', \"The ngrok authToken to use\", (config.ngrok && config.ngrok.authToken)],\n    ['--send', \"An e-mail address or phone number to send a link to\"]\n  ],\n  help: \"Starts a local server to serve your app and gives you a URL to it.\\n\" +\n    \"[project-dir] defaults to '.'\\n\" +\n    \"\\n\" +\n    \"If you don't specify a port, a random, free port will be chosen automatically.\",\n  runAsync: async function (env) {\n    var argv = env.argv;\n    var args = argv._;\n\n    // If a project-dir is provided, change to that directory\n    var projectDir = args[1];\n    if (projectDir) {\n      process.chdir(projectDir);\n      log(crayon.gray(\"Using project at\", process.cwd()));\n    }\n\n    var mainModulePath = await urlUtil.guessMainModulePathAsync();\n    var entryPoint = await urlUtil.entryPointAsync();\n    log(crayon.gray(\"Using mainModulePath of\", mainModulePath, \"and an entry point of\", entryPoint));\n\n    var ngrokSubdomain = argv['ngrok-subdomain'] || (config.ngrok && config.ngrok.subdomain) || undefined;\n    var ngrokAuthToken = argv['ngrok-auth-token'] || (config.ngrok && config.ngrok.authToken) || undefined;\n\n    var port = argv.port;\n    if (port == null) {\n      port = 9000 + Math.floor(Math.random() * 1000);\n    }\n\n    var pm2name = \"exp-serve.<hash>.<pkg-name>\";\n  },\n  pm2NameAsync,\n};\n"],"sourceRoot":"/source/"}