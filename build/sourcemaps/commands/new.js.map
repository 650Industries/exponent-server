{"version":3,"sources":["commands/new.js"],"names":[],"mappings":";;;;AAAA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC3C,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,IAAI,UAAU,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;;AAElD,IAAI,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC7C,IAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE5B,MAAM,CAAC,OAAO,GAAG;AACf,MAAI,EAAE,KAAK;AACX,aAAW,EAAE,uBAAuB;AACpC,MAAI,EAAE,EAAE;AACR,UAAQ,oBAAE,WAAgB,GAAG,EAAE;;;;;AAK7B,QAAI,WAAW,GAAG,cAAc,CAAC;AACjC,QAAI,OAAO,CAAC;AACZ,QAAI;AACF,aAAO,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;KAClD,CAAC,OAAO,CAAC,EAAE;;;AAGV,SAAG,CAAC,sEAAsE,CAAC,CAAC;AAC5E,UAAI,IAAI,GAAG,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,EAAE,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;AACjE,aAAO,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;KAClD;;AAED,QAAI;AACF,UAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAC/B,CAAC,OAAO,CAAC,EAAE;AACV,YAAM,YAAY,CAAC,sBAAsB,EAAE,GAAG,EAAE,wBAAwB,GAAG,CAAC,CAAC,CAAC;KAC/E;;AAED,QAAI,UAAU,GAAG,GAAG,CAAC,IAAI,IAAI,UAAU,CAAC;;;;;AAKxC,QAAI,EAAE,GAAG,MAAM,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,EAAE,MAAM,CAAC,CAAC;AACxF,QAAI;AACF,YAAM,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;KAC5E,CAAC,OAAO,CAAC,EAAE;AACV,YAAM,YAAY,CAAC,oBAAoB,EAAE,GAAG,EAAE,mBAAmB,GAAG,UAAU,GAAG,+CAA+C,GAAG,CAAC,GAAG,sDAAsD,CAAC,CAAC;KAChM;;AAED,OAAG,CAAC,wCAAwC,EAAE,UAAU,CAAC,CAAC;GAE3D,CAAA,EACF,CAAC","file":"commands/new.js","sourcesContent":["var fs = require('fs');\nvar instapromise = require('instapromise');\nvar path = require('path');\n\nvar spawnAsync = require('@exponent/spawn-async');\n\nvar CommandError = require('./CommandError');\nvar log = require('../log');\n\nmodule.exports = {\n  name: 'new',\n  description: \"Sets up a new project\",\n  help: \"\",\n  runAsync: async function (env) {\n\n    // Here is what this will do\n\n    // 1. If there is no package.json in the current directory, run npm init\n    var pkgJsonFile = 'package.json';\n    var pkgFile;\n    try {\n      pkgFile = await fs.promise.readFile(pkgJsonFile);\n    } catch (e) {\n      \n      // No package.json, so let's create it\n      log(\"No package.json file found. Using `npm init` to help you create one.\");\n      var zero = await spawnAsync('npm', ['init'], {stdio: 'inherit'});\n      pkgFile = await fs.promise.readFile(pkgJsonFile);\n    }\n\n    try {\n      var pkg = JSON.parse(pkgFile);\n    } catch (e) {\n      throw CommandError('INVALID_PACKAGE_JSON', env, \"Invalid package.json: \" + e);\n    }\n\n    var entryPoint = pkg.main || 'index.js';\n\n    // 2. Figure out the entry point of the app. Try to create that file with the template\n    //    ... but fail if it already exist\n\n    var js = await fs.promise.readFile(path.join(__dirname, '..', '..', 'main.js'), 'utf8');\n    try {\n      await fs.promise.writeFile(entryPoint, js, {encoding: 'utf8', flag: 'wx'});\n    } catch (e) {\n      throw CommandError('ENTRY_POINT_EXISTS', env, \"The entry point (\" + entryPoint + \") already exists; refusing to overwrite it.\\n\" + e + \"\\nDelete that file and rerun `exp new` to try again.\");\n    }\n\n    log(\"Created an entry point for your app at\", entryPoint);\n\n  },\n};\n"],"sourceRoot":"/source/"}