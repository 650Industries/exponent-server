{"version":3,"sources":["simulator.js"],"names":[],"mappings":"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","file":"simulator.js","sourcesContent":["var _ = require('lodash-node');\nvar child_process = require('child_process');\nvar inquirerAsync = require('inquirer-async');\nvar instapromise = require('instapromise');\n\nfunction SimulatorError(code, message) {\n  var err = new Error(message);\n  err.code = code;\n  err._isSimulatorError = true;\n  return err;\n}\n\nfunction SimulatorNotAvailable(e) {\n  return SimulatorError('SIMULATOR_NOT_AVAILABLE', \"Simulator not available: \" + e.message);\n}\n\nasync function listSimulatorsAndTemplatesAsync() {\n  try {\n    var output = await child_process.promise.exec('xcrun instruments -s');\n  } catch (e) {\n    throw SimulatorNotAvailable(e);\n  }\n  var lines = output.split(\"\\n\");\n  var result = {\n    devices: [],\n    templates: [],\n  };\n  var bucket;\n  for (var line of lines) {\n    if (line === 'Known Devices:') {\n      bucket = 'devices';\n    } else if (line === 'Known Templates:') {\n      bucket = 'templates';\n    } else {\n      if (line) {\n        if (bucket) {\n          if (bucket === 'devices') {\n            var m = line.match(/^([^\\[]*) \\[([0-9A-F-]+)\\]$/);\n            if (m) {\n              result[bucket].push({\n                device: m[1],\n                udid: m[2],\n              });\n            } else {\n              throw SimulatorError('CANT_INTERPRET_OUTPUT', \"Couldn't understand device: \" + line);\n            }\n          } else {\n            result[bucket].push(line);\n          }\n        } else {\n          var err = SimulatorError('CANT_INTERPRET_OUTPUT', \"Couldn't interpret the output from `xcrun instruments -s`\");\n          err.output = output;\n          throw err;\n        }\n      }\n    }\n  }\n  return result;\n}\n\nasync function startSimulatorAsync(udid) {\n  var output = await child_process.promise.exec('open -a \"iOS Simulator\" --args -CurrentDeviceUDID ' + udid);\n}\n\nasync function askUserToPickASimulatorAsync() {\n  var {devices} = await listSimulatorsAndTemplatesAsync();\n  var choices = [];\n  for (var device of devices) {\n    choices.push({\n      name: device.device,\n      value: device.udid,\n    });\n  }\n\n  choices = _(_.sortBy(choices, (choice) => {\n    return (0 + !!choice.name.match(/iPhone/));\n  })).reverse().value();\n\n  var answers = await inquirerAsync.promptAsync([{\n    type: 'list',\n    message: \"Choose an available device to use\",\n    name: 'udid',\n    choices: choices,\n  }]);\n\n  return answers.udid;\n\n}\n\nmodule.exports = {\n  listSimulatorsAndTemplatesAsync,\n  startSimulatorAsync,\n  askUserToPickASimulatorAsync,\n};\n\nif (require.main === module) {\n  askUserToPickASimulatorAsync().then(startSimulatorAsync, console.error);\n}\n"],"sourceRoot":"/source/"}