{"version":3,"sources":["api.js"],"names":[],"mappings":"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","file":"api.js","sourcesContent":["/**\n *\n * Makes an API call to exp.host\n *\n */\n\nvar instapromise = require('instapromise');\nvar request = require('request');\n\nvar log = require('./log');\nvar userSettings = require('./userSettings');\n\nvar HOST = 'exp.host';\nvar PORT = 80;\n\nfunction ApiError(code, env, message) {\n  var err = new Error(message);\n  err.code = code;\n  err.env = env;\n  err._isApiError = true;\n  return err;\n}\n\nasync function getExpHostBaseUrlAsync() {\n  var api = await userSettings().getAsync('api', null);\n  var host = (api && api.host) || HOST;\n  var port = (api && api.port) || PORT;\n  var baseUrl = (api && api.baseUrl) || ('http://' + host + ':' + port);\n  return baseUrl;\n}\n\nasync function getApiBaseUrlAsync() {\n  // TODO: Let you specify host and port with command line arguments (use config module)\n  var expHostBaseUrl = await getExpHostBaseUrlAsync();\n  var baseUrl = expHostBaseUrl + '/--/api';\n  return baseUrl;\n};\n\nvar callMethodAsync = async function (methodName, args) {\n\n  var baseUrl = await getApiBaseUrlAsync();\n\n  // TODO: Make it so we don't read the userSettings file twice in a row needlessly,\n  // ... but not a big deal for now\n  var settings = await userSettings().readAsync();\n  var {username, hashedPassword} = settings;\n  //log(\"username=\", username, \"hashedPassword=\", hashedPassword);\n\n  var url = baseUrl + '/' + encodeURIComponent(methodName) + '/' + encodeURIComponent(JSON.stringify(args));\n  if (username && hashedPassword) {\n    url += '?username=' + encodeURIComponent(username) + '&hashedPassword=' + encodeURIComponent(hashedPassword);\n  }\n  //log(\"url=\", url);\n\n  var response = await request.promise.post(url);\n  var body = response.body;\n  try {\n    var response = JSON.parse(body);\n  } catch (e) {\n    var err = new Error(\"Unparseable response from API server: \" + body);\n    throw err;\n  }\n  if (response.err) {\n    throw ApiError(response.code, response.err.env, response.err);\n  }\n  return response;\n};\n\nmodule.exports = {\n  callMethodAsync,\n  getExpHostBaseUrlAsync,\n  getApiBaseUrlAsync,\n};\n"],"sourceRoot":"/source/"}